
Skip to main content
ðŸš… LiteLLM
Docs
Integrations
Enterprise
Release Notes
ðŸ’¸ LLM Model Cost Map
GitHub
Slack/Discord

    LiteLLM - Getting Started
    LiteLLM AI Gateway

    E2E Tutorial
    Config.yaml
    Setup & Deployment
    Demo App
    Admin UI
    Architecture
    All Endpoints (Swagger)
    âœ¨ Enterprise Features
    LiteLLM Proxy CLI
    Authentication
    Spend Tracking
        Spend Tracking
        Custom LLM Pricing
        Billing
    Budgets + Rate Limits
    Caching
    Create Custom Plugins
    Load Balancing, Routing, Fallbacks
    Logging, Alerting, Metrics
    Making LLM Requests
    Model Access
    Secret Managers

Supported Endpoints
Supported Models & Providers
Guides
Routing, Loadbalancing & Fallbacks

    LiteLLM Python SDK
    Load Testing
    Tutorials
    Contributing
    Extras
    Integrate as a Model Provider
    Support & Talk with founders

    LiteLLM AI GatewaySpend TrackingSpend Tracking

Spend Tracking

Track spend for keys, users, and teams across 100+ LLMs.

LiteLLM automatically tracks spend for all known models. See our model cost map
Keep Pricing Data Updated

Sync model pricing data from GitHub to ensure accurate cost tracking.
How to Track Spend with LiteLLM

Step 1

ðŸ‘‰ Setup LiteLLM with a Database

Step2 Send /chat/completions request

    OpenAI Python v1.0.0+
    Curl Request
    Langchain

Send Request with Spend Tracking

import openai
client = openai.OpenAI(
    api_key="sk-1234",
    base_url="http://0.0.0.0:4000"
)

response = client.chat.completions.create(
    model="llama3",
    messages = [
        {
            "role": "user",
            "content": "this is a test request, write a short poem"
        }
    ],
    user="palantir", # OPTIONAL: pass user to track spend by user
    extra_body={
        "metadata": {
            "tags": ["jobID:214590dsff09fds", "taskName:run_page_classification"] # ENTERPRISE: pass tags to track spend by tags
        }
    }
)

print(response)

Step3 - Verify Spend Tracked That's IT. Now Verify your spend was tracked

    Response Headers
    DB + UI

Expect to see x-litellm-response-cost in the response headers with calculated cost
Allowing Non-Proxy Admins to access /spend endpoints

Use this when you want non-proxy admins to access /spend endpoints
info

Schedule a meeting with us to get your Enterprise License
Create Key

Create Key with with permissions={"get_spend_routes": true}
Generate Key with Spend Route Permissions

curl --location 'http://0.0.0.0:4000/key/generate' \
        --header 'Authorization: Bearer sk-1234' \
        --header 'Content-Type: application/json' \
        --data '{
            "permissions": {"get_spend_routes": true}
    }'

Use generated key on /spend endpoints

Access spend Routes with newly generate keys

curl -X GET 'http://localhost:4000/global/spend/report?start_date=2024-04-01&end_date=2024-06-30' \
  -H 'Authorization: Bearer sk-H16BKvrSNConSsBYLGc_7A'

Reset Team, API Key Spend - MASTER KEY ONLY

Use /global/spend/reset if you want to:

    Reset the Spend for all API Keys, Teams. The spend for ALL Teams and Keys in LiteLLM_TeamTable and LiteLLM_VerificationToken will be set to spend=0

    LiteLLM will maintain all the logs in LiteLLMSpendLogs for Auditing Purposes

Request

Only the LITELLM_MASTER_KEY you set can access this route

curl -X POST \
  'http://localhost:4000/global/spend/reset' \
  -H 'Authorization: Bearer sk-1234' \
  -H 'Content-Type: application/json'

Expected Responses

{"message":"Spend for all API Keys and Teams reset successfully","status":"success"}

Total spend per user

Assuming you have been issuing keys for end users, and setting their user_id on the key, you can check their usage.
Get User Spend - API Request

curl -L -X GET 'http://localhost:4000/user/info?user_id=jane_smith' \
-H 'Authorization: Bearer sk-...'

Total for a user API Response

{
  "user_id": "jane_smith",
  "user_info": {
    "spend": 0.1
  },
  "keys": [
    {
      "token": "6e952b0efcafbb6350240db25ed534b4ec6011b3e1ba1006eb4f903461fd36f6",
      "key_name": "sk-...KE_A",
      "key_alias": "user-01882d6b-e090-776a-a587-21c63e502670-01983ddb-872f-71a3-8b3a-f9452c705483",
      "soft_budget_cooldown": false,
      "spend": 0.1,
      "expires": "2025-07-31T19:14:13.968000+00:00",
      "models": [],
      "aliases": {},
      "config": {},
      "user_id": "01982d6b-e090-776a-a587-21c63e502660",
      "team_id": "f2044fde-2293-482f-bf35-a8dab4e85c5f",
      "permissions": {},
      "max_parallel_requests": null,
      "metadata": {},
      "blocked": null,
      "tpm_limit": null,
      "rpm_limit": null,
      "max_budget": null,
      "budget_duration": null,
      "budget_reset_at": null,
      "allowed_cache_controls": [],
      "allowed_routes": [],
      "model_spend": {},
      "model_max_budget": {},
      "budget_id": null,
      "organization_id": null,
      "object_permission_id": null,
      "created_at": "2025-07-24T19:14:13.970000Z",
      "created_by": "582b168f-fc11-4e14-ad6a-cf4bb3656ddc",
      "updated_at": "2025-07-24T19:14:13.970000Z",
      "updated_by": "582b168f-fc11-4e14-ad6a-cf4bb3656ddc",
      "litellm_budget_table": null,
      "litellm_organization_table": null,
      "object_permission": null,
      "team_alias": null
    }
  ],
  "teams": []
}

Warning End users can provide the user parameter in their request bodies, doing this will increment the cost reported via /customer/info?end_user_id=self-declared-user, and not for the user that owns the key as reported by that API. This means users could "avoid" having their spend tracked, through their method. This means if you need to track user spend, and are giving end users API keys, you must always set user_id when creating their api keys, and use keys issued for that user every time you're making LLM calls on their behalf in backend services. This will track their spend.
Daily Spend Breakdown API

Retrieve granular daily usage data for a user (by model, provider, and API key) with a single endpoint.

Example Request:
Daily Spend Breakdown API

curl -L -X GET 'http://localhost:4000/user/daily/activity?start_date=2025-03-20&end_date=2025-03-27' \
-H 'Authorization: Bearer sk-...'

Daily Spend Breakdown API Response

{
    "results": [
        {
            "date": "2025-03-27",
            "metrics": {
                "spend": 0.0177072,
                "prompt_tokens": 111,
                "completion_tokens": 1711,
                "total_tokens": 1822,
                "api_requests": 11
            },
            "breakdown": {
                "models": {
                    "gpt-4o-mini": {
                        "spend": 1.095e-05,
                        "prompt_tokens": 37,
                        "completion_tokens": 9,
                        "total_tokens": 46,
                        "api_requests": 1
                },
                "providers": { "openai": { ... }, "azure_ai": { ... } },
                "api_keys": { "3126b6eaf1...": { ... } }
            }
        }
    ],
    "metadata": {
        "total_spend": 0.7274667,
        "total_prompt_tokens": 280990,
        "total_completion_tokens": 376674,
        "total_api_requests": 14
    }
}

API Reference

See our Swagger API for more details on the /user/daily/activity endpoint
Custom Tags

Requirements:

    Virtual Keys & a database should be set up, see virtual keys

Note: By default, LiteLLM will track User-Agent as a custom tag for cost tracking. This enables viewing usage for tools like Claude Code, Gemini CLI, etc.
Client-side spend tag

    Set on Key
    Set on Team
    OpenAI Python v1.0.0+
    OpenAI JS
    Curl Request
    Langchain

curl -L -X POST 'http://0.0.0.0:4000/key/generate' \
-H 'Authorization: Bearer sk-1234' \
-H 'Content-Type: application/json' \
-d '{
    "metadata": {
        "tags": ["tag1", "tag2", "tag3"]
    }
}

'

Add custom headers to spend tracking

You can add custom headers to the request to track spend and usage.

litellm_settings:
  extra_spend_tag_headers:
    - "x-custom-header"

Disable user-agent tracking

You can disable user-agent tracking by setting litellm_settings.disable_add_user_agent_to_request_tags to true.

litellm_settings:
  disable_add_user_agent_to_request_tags: true

âœ¨ (Enterprise) Generate Spend Reports

Use this to charge other teams, customers, users

Use the /global/spend/report endpoint to get spend reports

    Spend Per Team
    Spend Per Customer
    Spend for Specific API Key
    Spend for Internal User (Key Owner)

Example Request

ðŸ‘‰ Key Change: Specify group_by=team

curl -X GET 'http://localhost:4000/global/spend/report?start_date=2024-04-01&end_date=2024-06-30&group_by=team' \
  -H 'Authorization: Bearer sk-1234'

Example Response

    Expected Response
    Script to Parse Response (Python)

[
    {
        "group_by_day": "2024-04-30T00:00:00+00:00",
        "teams": [
            {
                "team_name": "Prod Team",
                "total_spend": 0.0015265,
                "metadata": [ # see the spend by unique(key + model)
                    {
                        "model": "gpt-4",
                        "spend": 0.00123,
                        "total_tokens": 28,
                        "api_key": "88dc28.." # the hashed api key
                    },
                    {
                        "model": "gpt-4",
                        "spend": 0.00123,
                        "total_tokens": 28,
                        "api_key": "a73dc2.." # the hashed api key
                    },
                    {
                        "model": "chatgpt-v-2",
                        "spend": 0.000214,
                        "total_tokens": 122,
                        "api_key": "898c28.." # the hashed api key
                    },
                    {
                        "model": "gpt-3.5-turbo",
                        "spend": 0.0000825,
                        "total_tokens": 85,
                        "api_key": "84dc28.." # the hashed api key
                    }
                ]
            }
        ]
    }
]

ðŸ“Š Spend Logs API - Individual Transaction Logs

The /spend/logs endpoint now supports a summarize parameter to control data format when using date filters.
Key Parameters
Parameter	Description
summarize	New parameter: true (default) = aggregated data, false = individual transaction logs
Examples

Get individual transaction logs:
Get Individual Transaction Logs

curl -X GET "http://localhost:4000/spend/logs?start_date=2024-01-01&end_date=2024-01-02&summarize=false" \
-H "Authorization: Bearer sk-1234"

Get summarized data (default):
Get Summarized Spend Data

curl -X GET "http://localhost:4000/spend/logs?start_date=2024-01-01&end_date=2024-01-02" \
-H "Authorization: Bearer sk-1234"

Use Cases:

    summarize=false: Analytics dashboards, ETL processes, detailed audit trails
    summarize=true: Daily spending reports, high-level cost tracking (legacy behavior)

âœ¨ Custom Spend Log metadata

Log specific key,value pairs as part of the metadata for a spend log
info

Logging specific key,value pairs in spend logs metadata is an enterprise feature.

Requirements:

    Virtual Keys & a database should be set up, see virtual keys

Usage - /chat/completions requests with special spend logs metadata

    Set on Key
    Set on Team
    OpenAI Python v1.0.0+
    OpenAI JS
    Curl Request
    Using Headers
    Langchain

curl -L -X POST 'http://0.0.0.0:4000/key/generate' \
-H 'Authorization: Bearer sk-1234' \
-H 'Content-Type: application/json' \
-d '{
    "metadata": {
      "spend_logs_metadata": {
          "hello": "world"
      }
    }
}

'

Viewing Spend w/ custom metadata
/spend/logs Request Format

curl -X GET "http://0.0.0.0:4000/spend/logs?request_id=<your-call-id" \ # e.g.: chatcmpl-9ZKMURhVYSi9D6r6PJ9vLcayIK0Vm
-H "Authorization: Bearer sk-1234"

/spend/logs Response Format

[
    {
        "request_id": "chatcmpl-9ZKMURhVYSi9D6r6PJ9vLcayIK0Vm",
        "call_type": "acompletion",
        "metadata": {
            "user_api_key": "88dc28d0f030c55ed4ab77ed8faf098196cb1c05df778539800c9f1243fe6b4b",
            "user_api_key_alias": null,
            "spend_logs_metadata": { # ðŸ‘ˆ LOGGED CUSTOM METADATA
                "hello": "world"
            },
            "user_api_key_team_id": null,
            "user_api_key_user_id": "116544810872468347480",
            "user_api_key_team_alias": null
        },
    }
]

Previous
âœ¨ Audit Logs
Next
Custom LLM Pricing

    How to Track Spend with LiteLLM
    Allowing Non-Proxy Admins to access /spend endpoints
    Total spend per user
    Daily Spend Breakdown API
        API Reference
    Custom Tags
        Client-side spend tag
        Add custom headers to spend tracking
        Disable user-agent tracking
    âœ¨ (Enterprise) Generate Spend Reports
    ðŸ“Š Spend Logs API - Individual Transaction Logs
        Key Parameters
        Examples
    âœ¨ Custom Spend Log metadata

Docs

    Getting Started

Community

    Discord
    Twitter

More

    GitHub

Copyright Â© 2025 liteLLM
