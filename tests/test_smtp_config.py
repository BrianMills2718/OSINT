#!/usr/bin/env python3
"""
Test SMTP configuration - Verify email credentials work.

This script tests the SMTP settings in .env by sending a test email.
"""

import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv

def test_smtp_connection():
    """Test SMTP connection and send a test email."""

    print("=" * 80)
    print("SMTP CONFIGURATION TEST")
    print("=" * 80)
    print()

    # Load environment variables
    load_dotenv()

    # Get SMTP configuration
    smtp_host = os.getenv('SMTP_HOST')
    smtp_port = int(os.getenv('SMTP_PORT', '587'))
    smtp_username = os.getenv('SMTP_USERNAME')
    smtp_password = os.getenv('SMTP_PASSWORD')
    smtp_from_email = os.getenv('SMTP_FROM_EMAIL')
    smtp_from_name = os.getenv('SMTP_FROM_NAME', 'OSINT Monitor')
    alert_to_email = os.getenv('ALERT_TO_EMAIL')

    # Validate configuration
    print("Configuration loaded:")
    print(f"  SMTP Host: {smtp_host}")
    print(f"  SMTP Port: {smtp_port}")
    print(f"  Username: {smtp_username}")
    print(f"  Password: {'*' * len(smtp_password) if smtp_password else '(not set)'}")
    print(f"  From Email: {smtp_from_email}")
    print(f"  From Name: {smtp_from_name}")
    print(f"  Test Recipient: {alert_to_email}")
    print()

    if not all([smtp_host, smtp_username, smtp_password, smtp_from_email, alert_to_email]):
        print("❌ ERROR: Missing required SMTP configuration in .env")
        print()
        print("Required variables:")
        print("  SMTP_HOST")
        print("  SMTP_PORT")
        print("  SMTP_USERNAME")
        print("  SMTP_PASSWORD")
        print("  SMTP_FROM_EMAIL")
        print("  ALERT_TO_EMAIL")
        return False

    # Create test email
    print("Creating test email...")
    msg = MIMEMultipart('alternative')
    msg['Subject'] = 'OSINT Monitor - SMTP Test'
    msg['From'] = f'{smtp_from_name} <{smtp_from_email}>'
    msg['To'] = alert_to_email

    # Plain text version
    text_body = """
OSINT Monitor - SMTP Configuration Test

This is a test email to verify your SMTP configuration is working correctly.

If you received this email, your Boolean Monitoring system is ready to send alerts!

Configuration Details:
- SMTP Host: {}
- SMTP Port: {}
- From Email: {}

Next Steps:
1. Run a test monitor: python3 monitoring/boolean_monitor.py
2. Check for new results alerts in your inbox

---
Generated by OSINT Monitor
""".format(smtp_host, smtp_port, smtp_from_email)

    # HTML version (using f-string to avoid .format() CSS conflicts)
    html_body = f"""
<!DOCTYPE html>
<html>
<head>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        h1 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        .success {{ background: #d4edda; border-left: 4px solid #28a745; padding: 15px; margin: 15px 0; }}
        .info {{ background: #f8f9fa; border-left: 4px solid #3498db; padding: 15px; margin: 15px 0; }}
        .footer {{ margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #7f8c8d; }}
        code {{ background: #f4f4f4; padding: 2px 6px; border-radius: 3px; font-family: monospace; }}
    </style>
</head>
<body>
    <h1>OSINT Monitor - SMTP Test</h1>

    <div class="success">
        <strong>✓ SMTP Configuration Working!</strong><br>
        This test email confirms your Boolean Monitoring system can send alerts.
    </div>

    <div class="info">
        <strong>Configuration Details:</strong><br>
        SMTP Host: <code>{smtp_host}</code><br>
        SMTP Port: <code>{smtp_port}</code><br>
        From Email: <code>{smtp_from_email}</code>
    </div>

    <h2>Next Steps</h2>
    <p>Your email alerts are ready! You can now:</p>
    <ol>
        <li>Run a test monitor: <code>python3 monitoring/boolean_monitor.py</code></li>
        <li>Check your inbox for new results alerts</li>
        <li>Configure production monitors in <code>data/monitors/configs/</code></li>
    </ol>

    <div class="footer">
        <p>Generated by OSINT Monitor - Boolean Monitoring System</p>
    </div>
</body>
</html>
"""

    part_text = MIMEText(text_body, 'plain')
    part_html = MIMEText(html_body, 'html')
    msg.attach(part_text)
    msg.attach(part_html)

    # Attempt to send email
    print("Connecting to SMTP server...")
    try:
        with smtplib.SMTP(smtp_host, smtp_port, timeout=10) as server:
            print("  ✓ Connected to SMTP server")

            print("Starting TLS encryption...")
            server.starttls()
            print("  ✓ TLS encryption enabled")

            print("Authenticating...")
            server.login(smtp_username, smtp_password)
            print("  ✓ Authentication successful")

            print(f"Sending test email to {alert_to_email}...")
            server.send_message(msg)
            print("  ✓ Email sent successfully")

        print()
        print("=" * 80)
        print("✓ SMTP TEST PASSED")
        print("=" * 80)
        print()
        print(f"Check your inbox at {alert_to_email} for the test email.")
        print("If you don't see it, check your spam/junk folder.")
        print()
        return True

    except smtplib.SMTPAuthenticationError as e:
        print()
        print("=" * 80)
        print("❌ SMTP AUTHENTICATION FAILED")
        print("=" * 80)
        print()
        print(f"Error: {str(e)}")
        print()
        print("Common causes:")
        print("  1. Incorrect username or password")
        print("  2. App password not generated (for Gmail with 2FA)")
        print("  3. 'Less secure app access' disabled (for Gmail without 2FA)")
        print()
        print("For Gmail:")
        print("  - Enable 2-Factor Authentication")
        print("  - Create an App Password at: https://myaccount.google.com/apppasswords")
        print("  - Use the 16-character app password (not your regular password)")
        print()
        return False

    except smtplib.SMTPException as e:
        print()
        print("=" * 80)
        print("❌ SMTP ERROR")
        print("=" * 80)
        print()
        print(f"Error: {str(e)}")
        print()
        return False

    except ConnectionRefusedError:
        print()
        print("=" * 80)
        print("❌ CONNECTION REFUSED")
        print("=" * 80)
        print()
        print(f"Could not connect to {smtp_host}:{smtp_port}")
        print()
        print("Check:")
        print("  1. SMTP_HOST is correct")
        print("  2. SMTP_PORT is correct (usually 587 for TLS)")
        print("  3. Firewall is not blocking outbound SMTP")
        print()
        return False

    except Exception as e:
        print()
        print("=" * 80)
        print("❌ UNEXPECTED ERROR")
        print("=" * 80)
        print()
        print(f"Error: {str(e)}")
        print()
        return False


if __name__ == "__main__":
    success = test_smtp_connection()
    exit(0 if success else 1)
